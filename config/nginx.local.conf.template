user nobody;
worker_processes  4;

pid        ${persnicketly-tmp}/nginx.pid;

events {
    worker_connections  1024;
    # multi_accept on;
}

http {
    include       ${nginx-home}/nginx/mime.types;

    # fallback in case we can't determine a type
    default_type application/octet-stream;

    access_log    ${persnicketly-tmp}/access.log;
    error_log     ${persnicketly-tmp}/error.log;

    sendfile                on;
    tcp_nopush              on;
    tcp_nodelay             on;
    keepalive_timeout       65;
    types_hash_max_size   2048;

    gzip on;
    gzip_disable "msie6";
    gzip_http_version 1.1;
    gzip_proxied any;
    gzip_min_length 500;
    gzip_types text/plain text/html text/xml text/css
               text/comma-separated-values
               text/javascript application/x-javascript
               application/atom+xml;

    # this can be any application server, not just Unicorn/Rainbows!
    upstream app_server {
      # fail_timeout=0 means we always retry an upstream even if it failed
      # to return a good HTTP response (in case the Unicorn master nukes a
      # single worker for timing out).

      # for TCP setups, point these to your backend servers
      # web1.persnicketly.com is defined in /etc/hosts (localhost)
      server localhost:8080 fail_timeout=0;
    }

    server {
      # enable one of the following if you're on Linux or FreeBSD
      listen 80 default; # for Linux

      client_max_body_size 4G;
      server_name _;

      # ~2 seconds is often enough for most folks to parse HTML/CSS and
      # retrieve needed images/icons/frames, connections are cheap in
      # nginx so increasing this is generally safe...
      keepalive_timeout 5;

      # path for static files
      root ${persnicketly-src-path}/src/main/webapp;

      # Prefer to serve static files directly from nginx to avoid unnecessary
      # data copies from the application server.
      #
      # try_files directive appeared in in nginx 0.7.27 and has stabilized
      # over time.  Older versions of nginx (e.g. 0.6.x) requires
      # "if (!-f $request_filename)" which was less efficient:
      # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
      try_files $uri.html $uri @app;

      location @app {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        proxy_pass http://app_server;
      }

      # Error pages
      error_page 500 502 503 504 /500.html;
      location = /50x.html {
        root ${persnicketly-src-path}/src/main/webapp;
      }
      error_page 404 /404.html;
      location = /404.html {
        root ${persnicketly-src-path}/src/main/webapp;
      }
    }
}

